# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-2024 CC-BY-4.0 Vyper Team
# This file is distributed under the same license as the Vyper package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Vyper \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-08 10:44+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../event-logging.rst:4
msgid "Event Logging"
msgstr ""

#: ../../event-logging.rst:6
msgid "Vyper can log events to be caught and displayed by user interfaces."
msgstr ""

#: ../../event-logging.rst:9
msgid "Example of Logging"
msgstr ""

#: ../../event-logging.rst:11
msgid ""
"This example is taken from the `sample ERC20 contract "
"<https://github.com/vyperlang/vyper/blob/master/examples/tokens/ERC20.vy>`_"
" and shows the basic flow of event logging:"
msgstr ""

#: ../../event-logging.rst:34
msgid "Let's look at what this is doing."
msgstr ""

#: ../../event-logging.rst:36
msgid ""
"We declare two event types to log. The two events are similar in that "
"they contain two indexed address fields. Indexed fields do not make up "
"part of the event data itself, but can be searched by clients that want "
"to catch the event. Also, each event contains one single data field, in "
"each case called ``value``. Events can contain several arguments with any"
" names desired."
msgstr ""

#: ../../event-logging.rst:37
msgid ""
"In the ``transfer`` function, after we do whatever work is necessary, we "
"log the event. We pass three arguments, corresponding with the three "
"arguments of the Transfer event declaration."
msgstr ""

#: ../../event-logging.rst:39
msgid ""
"Clients listening to the events will declare and handle the events they "
"are interested in using a `library such as web3.js "
"<https://solidity.readthedocs.io/en/latest/contracts.html#events>`_:"
msgstr ""

#: ../../event-logging.rst:55
msgid ""
"In this example, the listening client declares the event to listen for. "
"Any time the contract sends this log event, the callback will be invoked."
msgstr ""

#: ../../event-logging.rst:58
msgid "Declaring Events"
msgstr ""

#: ../../event-logging.rst:60
msgid "Let's look at an event declaration in more detail."
msgstr ""

#: ../../event-logging.rst:69
msgid ""
"The EVM currently has five opcodes for emitting event logs: ``LOG0``, "
"``LOG1``, ``LOG2``, ``LOG3``, and ``LOG4``. These opcodes can be used to "
"create log records, where each log record consists of both **topics** and"
" **data**. Topics are 32-byte ''words'' that are used to describe what is"
" happening in an event. While topics are searchable, data is not. Event "
"data is however not limited, which means that you can include large or "
"complicated data like arrays or strings. Different opcodes (``LOG0`` "
"through ``LOG4``) allow for different numbers of topics. For instance, "
"``LOG1`` includes one topic, ``LOG2`` includes two topics, and so on. "
"Event declarations look similar to struct declarations, containing one or"
" more arguments that are passed to the event. Typical events will contain"
" two kinds of arguments:"
msgstr ""

#: ../../event-logging.rst:78
msgid ""
"**Indexed** arguments (topics), which can be searched for by listeners. "
"Each indexed argument is identified by the ``indexed`` keyword.  Here, "
"each indexed argument is an address. You can have up to four indexed "
"arguments (``LOG4``), but indexed arguments are not passed directly to "
"listeners, although some of this information (such as the sender) may be "
"available in the listener's `results` object."
msgstr ""

#: ../../event-logging.rst:79
msgid ""
"**Value** arguments (data), which are passed through to listeners. You "
"can have any number of value arguments and they can have arbitrary names,"
" but each is limited by the EVM to be no more than 32 bytes."
msgstr ""

#: ../../event-logging.rst:81
msgid ""
"Note that the first topic of a log record consists of the signature of "
"the name of the event that occurred, including the types of its "
"parameters. It is also possible to create an event with no arguments. In "
"this case, use the ``pass`` statement:"
msgstr ""

#: ../../event-logging.rst:89
msgid "Logging Events"
msgstr ""

#: ../../event-logging.rst:91
msgid ""
"Once an event is declared, you can log (send) events. You can send events"
" as many times as you want to. Please note that events sent do not take "
"state storage and thus do not cost gas: this makes events a good way to "
"save some information. However, the drawback is that events are not "
"available to contracts, only to clients."
msgstr ""

#: ../../event-logging.rst:93
msgid "Logging events is done using the ``log`` statement:"
msgstr ""

#: ../../event-logging.rst:99
msgid ""
"The order and types of arguments given must match the order of arguments "
"used when declaring the event."
msgstr ""

#: ../../event-logging.rst:102
msgid "Listening for Events"
msgstr ""

#: ../../event-logging.rst:104
msgid ""
"In the example listener above, the ``result`` arg actually passes a "
"`large amount of information "
"<https://web3js.readthedocs.io/en/v1.2.6/web3-eth-contract.html#contract-"
"events-return>`_. Here we're most interested in ``result.returnValues``. "
"This is an object with properties that match the properties declared in "
"the event. Note that this object does not contain the indexed properties,"
" which can only be searched in the original ``myToken.Transfer`` that "
"created the callback."
msgstr ""

